# -*- coding: utf-8 -*-
"""modelo_regresion_linear_airvision_sencillo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Jd70p6yzQx8QNfzNfanjG-9e0hImDYY
"""

# import tensorflow as tf
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
from __future__ import print_function
from tensorflow.keras.callbacks import TensorBoard

x = tf.placeholder(tf.float32, name='input')
y_ = tf.placeholder(tf.float32, name='target')

W = tf.Variable(5., name='W')
b = tf.Variable(3., name='b')


y = tf.add(tf.multiply(x, W), b)
y = tf.identity(y, name='output')

loss = tf.reduce_mean(tf.square(y - y_),name ="loss")
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)
train_op = optimizer.minimize(loss, name='train')

init = tf.global_variables_initializer()

# Creating a tf.train.Saver adds operations to the graph to save and
# restore variables from checkpoints.

saver_def = tf.train.Saver().as_saver_def()

with open('graph_mul.pb', 'wb') as f:
  f.write(tf.get_default_graph().as_graph_def().SerializeToString())

print('Operation to initialize variables:       ', init.name)
print('Tensor to feed as input data:            ', x.name)
print('Tensor to feed as training targets:      ', y_.name)
print('Tensor to fetch as prediction:           ', y.name)
print('Operation to train one step:             ', train_op.name)
print('Tensor to be fed for checkpoint filename:', saver_def.filename_tensor_name)
print('Operation to save a checkpoint:          ', saver_def.save_tensor_name)
print('Operation to restore a checkpoint:       ', saver_def.restore_op_name)
print('Tensor to read value of W                ', W.value().name)
print('Tensor to read value of b                ', b.value().name) 
print('Trainable variables: ', tf.trainable_variables())
print('Loss:       ', loss.name)
print('Loss:       ', loss.value)




saver = tf.train.Saver()
sess = tf.Session()
sess.run(init)
saver.save(sess, "/content/sample_data/h"+"/checkpoint_name.ckpt")

# Commented out IPython magic to ensure Python compatibility.
from __future__ import print_function
writer = tf.summary.FileWriter('.')
writer.add_graph(tf.get_default_graph())
writer.flush()
# %load_ext tensorboard
# %tensorboard --logdir .
#para ver el graph

/content/sample_data/h/checkpoint_name.ckpt.data-00000-of-00001


for layer in model.layers: print(layer.get_config(), layer.get_weights())